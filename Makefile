#------------------------------------------------------------------------------#
# This makefile was generated by 'cbp2make' tool rev.147                       #
#------------------------------------------------------------------------------#


WORKDIR = `pwd`

CC = gcc
CXX = g++
AR = ar
LD = g++
WINDRES = windres

INC = 
CFLAGS = -Wall `pkg-config gtk+-3.0 --cflags` -rdynamic  -g -std=c99 -Wall -Wextra  -Wstrict-prototypes -Wold-style-definition -Wno-unused-parameter -Wno-unused-result
RESINC = 
LIBDIR = 
LIB = 
LDFLAGS = `pkg-config gtk+-3.0 --libs` -export-dynamic

INC_DEBUG = $(INC)
CFLAGS_DEBUG = $(CFLAGS) -g
RESINC_DEBUG = $(RESINC)
RCFLAGS_DEBUG = $(RCFLAGS)
LIBDIR_DEBUG = $(LIBDIR)
LIB_DEBUG = $(LIB)
LDFLAGS_DEBUG = $(LDFLAGS)
OBJDIR_DEBUG = obj/Debug
DEP_DEBUG = 
OUT_DEBUG = bin/Debug/Oeil_De_Surimi

INC_RELEASE = $(INC)
CFLAGS_RELEASE = $(CFLAGS) -O2
RESINC_RELEASE = $(RESINC)
RCFLAGS_RELEASE = $(RCFLAGS)
LIBDIR_RELEASE = $(LIBDIR)
LIB_RELEASE = $(LIB)
LDFLAGS_RELEASE = $(LDFLAGS) -s
OBJDIR_RELEASE = obj/Release
DEP_RELEASE = 
OUT_RELEASE = bin/Release/Oeil_De_Surimi

INC_XOR = $(INC)
CFLAGS_XOR = $(CFLAGS) -g
RESINC_XOR = $(RESINC)
RCFLAGS_XOR = $(RCFLAGS)
LIBDIR_XOR = $(LIBDIR)
LIB_XOR = $(LIB)
LDFLAGS_XOR = $(LDFLAGS)
OBJDIR_XOR = obj/neural_network/XOR
DEP_XOR = 
OUT_XOR = bin/neural_network/XOR/Oeil_De_Surimi

INC_NN = $(INC)
CFLAGS_NN = $(CFLAGS) -O2
RESINC_NN = $(RESINC)
RCFLAGS_NN = $(RCFLAGS)
LIBDIR_NN = $(LIBDIR)
LIB_NN = $(LIB)
LDFLAGS_NN = $(LDFLAGS) -s
OBJDIR_NN = obj/neural_network
DEP_NN = 
OUT_NN = bin/neural_network/Oeil_De_Surimi

INC_SCALE_IMAGE = $(INC)
CFLAGS_SCALE_IMAGE = $(CFLAGS) -O2
RESINC_SCALE_IMAGE = $(RESINC)
RCFLAGS_SCALE_IMAGE = $(RCFLAGS)
LIBDIR_SCALE_IMAGE = $(LIBDIR)
LIB_SCALE_IMAGE = $(LIB)
LDFLAGS_SCALE_IMAGE = $(LDFLAGS) -s
OBJDIR_SCALE_IMAGE = obj/scale_image
DEP_SCALE_IMAGE = 
OUT_SCALE_IMAGE = bin/scale_image/Oeil_De_Surimi

OBJ_DEBUG = $(OBJDIR_DEBUG)/gui/config.o $(OBJDIR_DEBUG)/gui/image_operation.o $(OBJDIR_DEBUG)/gui/main.o $(OBJDIR_DEBUG)/image_treatment/img_scale.o $(OBJDIR_DEBUG)/image_treatment/img_treatment.o $(OBJDIR_DEBUG)/neural_network/neural_network.o

OBJ_RELEASE = $(OBJDIR_RELEASE)/gui/config.o $(OBJDIR_RELEASE)/gui/image_operation.o $(OBJDIR_RELEASE)/gui/main.o $(OBJDIR_RELEASE)/image_treatment/img_scale.o $(OBJDIR_RELEASE)/image_treatment/img_treatment.o $(OBJDIR_RELEASE)/neural_network/neural_network.o

OBJ_XOR = $(OBJDIR_XOR)/neural_network/XOR/main_xor.o $(OBJDIR_XOR)/neural_network/neural_network.o

OBJ_NN = $(OBJDIR_NN)/neural_network/main.o $(OBJDIR_NN)/neural_network/neural_network.o

OBJ_SCALE_IMAGE = $(OBJDIR_SCALE_IMAGE)/image_treatment/img_scale.o $(OBJDIR_SCALE_IMAGE)/image_treatment/img_treatment.o $(OBJDIR_SCALE_IMAGE)/image_treatment/scale_main.o

all: debug release xor nn scale_image

clean: clean_debug clean_release clean_xor clean_nn clean_scale_image

before_debug: 
	test -d bin/Debug || mkdir -p bin/Debug
	test -d $(OBJDIR_DEBUG)/gui || mkdir -p $(OBJDIR_DEBUG)/gui
	test -d $(OBJDIR_DEBUG)/image_treatment || mkdir -p $(OBJDIR_DEBUG)/image_treatment
	test -d $(OBJDIR_DEBUG)/neural_network || mkdir -p $(OBJDIR_DEBUG)/neural_network

after_debug: 

debug: before_debug out_debug after_debug

out_debug: before_debug $(OBJ_DEBUG) $(DEP_DEBUG)
	$(LD) $(LIBDIR_DEBUG) -o $(OUT_DEBUG) $(OBJ_DEBUG)  $(LDFLAGS_DEBUG) $(LIB_DEBUG)

$(OBJDIR_DEBUG)/gui/config.o: gui/config.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c gui/config.c -o $(OBJDIR_DEBUG)/gui/config.o

$(OBJDIR_DEBUG)/gui/image_operation.o: gui/image_operation.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c gui/image_operation.c -o $(OBJDIR_DEBUG)/gui/image_operation.o

$(OBJDIR_DEBUG)/gui/main.o: gui/main.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c gui/main.c -o $(OBJDIR_DEBUG)/gui/main.o

$(OBJDIR_DEBUG)/image_treatment/img_scale.o: image_treatment/img_scale.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c image_treatment/img_scale.c -o $(OBJDIR_DEBUG)/image_treatment/img_scale.o

$(OBJDIR_DEBUG)/image_treatment/img_treatment.o: image_treatment/img_treatment.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c image_treatment/img_treatment.c -o $(OBJDIR_DEBUG)/image_treatment/img_treatment.o

$(OBJDIR_DEBUG)/neural_network/neural_network.o: neural_network/neural_network.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c neural_network/neural_network.c -o $(OBJDIR_DEBUG)/neural_network/neural_network.o

clean_debug: 
	rm -f $(OBJ_DEBUG) $(OUT_DEBUG)
	rm -rf bin/Debug
	rm -rf $(OBJDIR_DEBUG)/gui
	rm -rf $(OBJDIR_DEBUG)/image_treatment
	rm -rf $(OBJDIR_DEBUG)/neural_network

before_release: 
	test -d bin/Release || mkdir -p bin/Release
	test -d $(OBJDIR_RELEASE)/gui || mkdir -p $(OBJDIR_RELEASE)/gui
	test -d $(OBJDIR_RELEASE)/image_treatment || mkdir -p $(OBJDIR_RELEASE)/image_treatment
	test -d $(OBJDIR_RELEASE)/neural_network || mkdir -p $(OBJDIR_RELEASE)/neural_network

after_release: 

release: before_release out_release after_release

out_release: before_release $(OBJ_RELEASE) $(DEP_RELEASE)
	$(LD) $(LIBDIR_RELEASE) -o $(OUT_RELEASE) $(OBJ_RELEASE)  $(LDFLAGS_RELEASE) $(LIB_RELEASE)

$(OBJDIR_RELEASE)/gui/config.o: gui/config.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c gui/config.c -o $(OBJDIR_RELEASE)/gui/config.o

$(OBJDIR_RELEASE)/gui/image_operation.o: gui/image_operation.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c gui/image_operation.c -o $(OBJDIR_RELEASE)/gui/image_operation.o

$(OBJDIR_RELEASE)/gui/main.o: gui/main.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c gui/main.c -o $(OBJDIR_RELEASE)/gui/main.o

$(OBJDIR_RELEASE)/image_treatment/img_scale.o: image_treatment/img_scale.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c image_treatment/img_scale.c -o $(OBJDIR_RELEASE)/image_treatment/img_scale.o

$(OBJDIR_RELEASE)/image_treatment/img_treatment.o: image_treatment/img_treatment.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c image_treatment/img_treatment.c -o $(OBJDIR_RELEASE)/image_treatment/img_treatment.o

$(OBJDIR_RELEASE)/neural_network/neural_network.o: neural_network/neural_network.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c neural_network/neural_network.c -o $(OBJDIR_RELEASE)/neural_network/neural_network.o

clean_release: 
	rm -f $(OBJ_RELEASE) $(OUT_RELEASE)
	rm -rf bin/Release
	rm -rf $(OBJDIR_RELEASE)/gui
	rm -rf $(OBJDIR_RELEASE)/image_treatment
	rm -rf $(OBJDIR_RELEASE)/neural_network

before_xor: 
	test -d bin/neural_network/XOR || mkdir -p bin/neural_network/XOR
	test -d $(OBJDIR_XOR)/neural_network/XOR || mkdir -p $(OBJDIR_XOR)/neural_network/XOR
	test -d $(OBJDIR_XOR)/neural_network || mkdir -p $(OBJDIR_XOR)/neural_network

after_xor: 

xor: before_xor out_xor after_xor

out_xor: before_xor $(OBJ_XOR) $(DEP_XOR)
	$(LD) $(LIBDIR_XOR) -o $(OUT_XOR) $(OBJ_XOR)  $(LDFLAGS_XOR) $(LIB_XOR)

$(OBJDIR_XOR)/neural_network/XOR/main_xor.o: neural_network/XOR/main_xor.c
	$(CC) $(CFLAGS_XOR) $(INC_XOR) -c neural_network/XOR/main_xor.c -o $(OBJDIR_XOR)/neural_network/XOR/main_xor.o

$(OBJDIR_XOR)/neural_network/neural_network.o: neural_network/neural_network.c
	$(CC) $(CFLAGS_XOR) $(INC_XOR) -c neural_network/neural_network.c -o $(OBJDIR_XOR)/neural_network/neural_network.o

clean_xor: 
	rm -f $(OBJ_XOR) $(OUT_XOR)
	rm -rf bin/neural_network/XOR
	rm -rf $(OBJDIR_XOR)/neural_network/XOR
	rm -rf $(OBJDIR_XOR)/neural_network

before_nn: 
	test -d bin/neural_network || mkdir -p bin/neural_network
	test -d $(OBJDIR_NN)/neural_network || mkdir -p $(OBJDIR_NN)/neural_network

after_nn: 

nn: before_nn out_nn after_nn

out_nn: before_nn $(OBJ_NN) $(DEP_NN)
	$(LD) $(LIBDIR_NN) -o $(OUT_NN) $(OBJ_NN)  $(LDFLAGS_NN) $(LIB_NN)

$(OBJDIR_NN)/neural_network/main.o: neural_network/main.c
	$(CC) $(CFLAGS_NN) $(INC_NN) -c neural_network/main.c -o $(OBJDIR_NN)/neural_network/main.o

$(OBJDIR_NN)/neural_network/neural_network.o: neural_network/neural_network.c
	$(CC) $(CFLAGS_NN) $(INC_NN) -c neural_network/neural_network.c -o $(OBJDIR_NN)/neural_network/neural_network.o

clean_nn: 
	rm -f $(OBJ_NN) $(OUT_NN)
	rm -rf bin/neural_network
	rm -rf $(OBJDIR_NN)/neural_network

before_scale_image: 
	test -d bin/scale_image || mkdir -p bin/scale_image
	test -d $(OBJDIR_SCALE_IMAGE)/image_treatment || mkdir -p $(OBJDIR_SCALE_IMAGE)/image_treatment

after_scale_image: 

scale_image: before_scale_image out_scale_image after_scale_image

out_scale_image: before_scale_image $(OBJ_SCALE_IMAGE) $(DEP_SCALE_IMAGE)
	$(LD) $(LIBDIR_SCALE_IMAGE) -o $(OUT_SCALE_IMAGE) $(OBJ_SCALE_IMAGE)  $(LDFLAGS_SCALE_IMAGE) $(LIB_SCALE_IMAGE)

$(OBJDIR_SCALE_IMAGE)/image_treatment/img_scale.o: image_treatment/img_scale.c
	$(CC) $(CFLAGS_SCALE_IMAGE) $(INC_SCALE_IMAGE) -c image_treatment/img_scale.c -o $(OBJDIR_SCALE_IMAGE)/image_treatment/img_scale.o

$(OBJDIR_SCALE_IMAGE)/image_treatment/img_treatment.o: image_treatment/img_treatment.c
	$(CC) $(CFLAGS_SCALE_IMAGE) $(INC_SCALE_IMAGE) -c image_treatment/img_treatment.c -o $(OBJDIR_SCALE_IMAGE)/image_treatment/img_treatment.o

$(OBJDIR_SCALE_IMAGE)/image_treatment/scale_main.o: image_treatment/scale_main.c
	$(CC) $(CFLAGS_SCALE_IMAGE) $(INC_SCALE_IMAGE) -c image_treatment/scale_main.c -o $(OBJDIR_SCALE_IMAGE)/image_treatment/scale_main.o

clean_scale_image: 
	rm -f $(OBJ_SCALE_IMAGE) $(OUT_SCALE_IMAGE)
	rm -rf bin/scale_image
	rm -rf $(OBJDIR_SCALE_IMAGE)/image_treatment

.PHONY: before_debug after_debug clean_debug before_release after_release clean_release before_xor after_xor clean_xor before_nn after_nn clean_nn before_scale_image after_scale_image clean_scale_image

